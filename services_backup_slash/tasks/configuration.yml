---
- debug:
    msg: |-
      {%- set data = {} %}
      {%- set odirs = {} %}
      {%- for backuppeddir, idata in corpusops_services_backup_slash_backups.items() %}
      {%-  set dest_dir = idata.d %}
      {%-  set orig_dir = idata.o %}
      {%-  for m in ansible_facts.mounts %}
      {%-   if (
              (m.fstype|regex_search('(brtfs|fat|zfs|xfs|ext(4|3|2))'))
              and m.mount == backuppeddir
              and dest_dir not in m.device
              and dest_dir not in m.mount
              and not (m.options|regex_search(corpusops_services_backup_slash_options_filter))
              and not (m.device|regex_search(corpusops_services_backup_slash_filter))
              and not (m.mount|regex_search(corpusops_services_backup_slash_filter))
            ) %}
      {%-     set k = m.mount|regex_replace('[/][/]+', '/')|regex_replace('^/$', 'SLASH') %}
      {%-     set _ = m.update({
              'k': k,
              'do_mount': True,
              'ddir': dest_dir,
              'odir': orig_dir}) %}
      {%-     set _ = data.update({k: m}) %}
      {%-     set _ = odirs.update({m.odir: m}) %}
      {%-   endif %}
      {%-  endfor %}
      {%- endfor %}
      {%- for i, idata in odirs.items() %}
      {%-  for m in ansible_facts.mounts %}
      {%-     if i == m.mount or idata.odir == m.mount %}
      {%-       set _ = data[idata.k].update({'do_mount': False}) %}
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}
      {{- data|to_json}}
  register: backup_slash_to_backup_backups
- include_tasks: mount.yml
  loop: "{{backup_slash_to_backup_backups.msg|dict2items}}"
- name: files
  file:
    path: "{{item.path}}"
    state: "{{item.state|default(omit)}}"
    src: "{{item.src|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    recurse: "{{item.recurse|default(omit)}}"
  loop: "{{corpusops_services_backup_slash_vars.files|flatten(levels=1)}}"
  when: "(corpusops_services_backup_slash_vars.files is not none and
          corpusops_services_backup_slash_vars.files|length > 0)"
  register: corpusops_services_backup_slash_filest
  tags: [backup_configs]
- name: files copy
  copy:
    dest: "{{item.dest|default(omit)}}"
    src: "{{item.template
            | default('../templates/'+item.dest)}}"
    force: "{{item.get('force', True)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    recurse: "{{item.recurse|default(omit)}}"
  loop: "{{corpusops_services_backup_slash_vars.filescopy|flatten(levels=1)}}"
  when: "(corpusops_services_backup_slash_vars.filescopy is not none and
          corpusops_services_backup_slash_vars.filescopy|length > 0)"
  register: corpusops_services_backup_slash_filesct
  tags: [backup_configs]
- name: configs
  template:
    src: "{{item.template
            | default('../templates/'+item.name)}}"
    dest: "{{item.name}}"
    mode: "{{item.mode|default(omit)}}"
    force: "{{item.force|default(True)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    trim_blocks: "{{item.trim_blocks|default(False)}}"
  loop: "{{corpusops_services_backup_slash_vars.configs|flatten(levels=1)}}"
  when: "(corpusops_services_backup_slash_vars.configs is not none and
          corpusops_services_backup_slash_vars.configs|length > 0)"
  register: corpusops_services_backup_slash_configst
- set_fact:
    cacheable: false
    corpusops_services_backup_slash_configs_changed: "{{(
       corpusops_services_backup_slash_filest.changed or
       corpusops_services_backup_slash_filesct.changed or
       corpusops_services_backup_slash_configst.changed)}}"
  tags: [backup_configs]
- meta: flush_handlers
