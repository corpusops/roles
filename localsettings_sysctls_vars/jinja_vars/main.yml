---
{% set prefix = 'corpusops_localsettings_sysctls_' %}
{% set flavors = ['ubuntu', 'debian', 'centos', 'redhat', 'default'] %}
{% set knobs = ['files', 'filescopy', 'services', 'configs', 'packages',
               ] %}
{% set computed_defaults = [] %}
{% set lowered = [] %}
{% set sub_namespaced = {'settings': {}} %}
{% set namespaced = {} %}
{% set subos_append = {} %}
{#
{% set subos_append = {
    'ubuntu': {'os': 'debian', 'vars': ['packages']}
} %}
#}

{% for v in knobs %}
{%  set setted = {'s': False} %}
{%  for os in flavors %}
{%   if (
        os == 'default' or
        ansible_os_family.lower() == os or
        ansible_lsb.id.lower() == os) %}
{%    set vn = prefix + v %}
{%    if vars[vn] is none %}
{%      set os_vpref = vn + '_' + os %}
{%      if os_vpref in vars and not setted.s %}
{%        set _ = vars.update({vn: vars[os_vpref]}) %}
{%        set _ = setted.update({'s': True}) %}
{%      endif %}
{%    endif %}
{%   endif %}
{%  endfor %}
{% endfor %}

{% for os in subos_append %}
{%  if ansible_lsb.id.lower() == os %}
{%    for v in subos_append[os].vars %}
{%      set vn = prefix+'{0}_{1}'.format(
            v, subos_append[os].os) %}
{%      set _ = vars[prefix+v].extend(vars[vn]) %}
{%    endfor %}
{%  endif %}
{% endfor %}

{% for sysctldata in vars[prefix + 'knobs'] %}
{%  set sysctl = sysctldata.name %}
{%  set value  = sysctldata.value %}
{%  if ansible_virtualization_type in ['docker', 'lxc'] %}
{%    set _ = vars[prefix + 'disabled_knobs'].append(sysctl) %}
{%  else %}
{#    Optim depending on available RAM #}
{%    if value is none and ansible_memtotal_mb > 128000 %}
{%      set value = {
            'vm.min_free_kbytes': 1*1024*1024,
            'net.ipv4.tcp_wmem': '4096 65536 33554432',
            'net.ipv4.tcp_rmem': '4096 87380 33554432',
            'net.core.rmem_max': '33554432',
            'net.core.wmem_max': '33554432',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 90000 %}
{%      set value = {
            'vm.min_free_kbytes': 512*1024,
            'net.ipv4.tcp_wmem': '4096 65536 23068672',
            'net.ipv4.tcp_rmem': '4096 87380 23068672',
            'net.core.rmem_max': '23068672',
            'net.core.wmem_max': '23068672',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 60000 %}
{%      set value = {
            'vm.min_free_kbytes': 256*1024,
            'vm.swappiness': 1,
            'net.ipv4.tcp_wmem': '4096 65536 16777216',
            'net.ipv4.tcp_rmem': '4096 87380 16777216',
            'net.core.rmem_max': '16777216',
            'net.core.wmem_max': '16777216',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 30000 %}
{%      set value = {
            'vm.min_free_kbytes': 128*1024,
            'vm.swappiness': 10,
            'net.ipv4.tcp_wmem': '4096 65536 12582912',
            'net.ipv4.tcp_rmem': '4096 87380 12582912',
            'net.core.rmem_max': '12582912',
            'net.core.wmem_max': '12582912',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 15000 %}
{%      set value = {
            'vm.min_free_kbytes': 64*1024,
            'fs.inotify.max_user_instances': '512',
            'fs.inotify.max_user_watches': '100000',
            'net.ipv4.tcp_wmem': '4096 65536 8388608',
            'net.ipv4.tcp_rmem': '4096 87380 8388608',
            'net.core.rmem_max': '8388608',
            'net.core.wmem_max': '8388608',
            'vm.swappiness': 30,
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 8000 %}
{%      set value = {
            'vm.swappiness': 35,
            'net.ipv4.tcp_wmem': '4096 65536 4194304',
            'net.ipv4.tcp_rmem': '4096 87380 4194304',
            'net.core.rmem_max': '4194304',
            'net.core.wmem_max': '4194304',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 1000 %}
{%      set value = {
            'vm.min_free_kbytes': 32*1024,
            'vm.swappiness': 50,
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 512 %}
{%      set value = {
            'vm.min_free_kbytes': 16*1024,
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 256 %}
{%      set value = {
            'vm.min_free_kbytes': 6*1024,
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none and ansible_memtotal_mb > 128 %}
{%      set value = {
            'vm.min_free_kbytes': 3*1024,
        }.get(sysctl, None) %}
{%    endif %}
{#    last fallback #}
{%    if value is none %}
{%      set value = {
            'fs.inotify.max_user_instances': 128,
            'fs.inotify.max_user_watches': '8192',
        }.get(sysctl, None) %}
{%    endif %}
{%    if value is none %}
{%      set _ = vars[prefix + 'disabled_knobs'].append(sysctl) %}
{%    else %}
{%      set _ = sysctldata.update({'name': sysctl, 'value': value}) %}
{%      set _ = vars[prefix+'sysctls'].update({sysctl: value}) %}
{%    endif %}
{%  endif %}
{% endfor %}

{% for k in computed_defaults %}
{%  set _ = vars.update({prefix+k: vars[prefix+k].format(**vars)}) %}
{% endfor %}
{% for k in lowered %}
{%  set _ = vars.update({prefix+k: vars[prefix+k].lower()}) %}
{% endfor %}

{% for var in vars %}
{%  if var.startswith(prefix) %}
{%   set skipped = {'skip': False } %}
{%   for flav in flavors if not skipped.skip %}
{%    if var.endswith('_'+flav) and var.split('_'+flav)[0] in vars %}
{%     set _ = skipped.update({'skip': True}) %}
{%    endif %}
{%   endfor %}
{%   for ns in sub_namespaced if sub_namespaced|length > 0 %}
{%    if var.startswith(prefix+ns+'_') and not skipped.skip%}
{%     set svar = var.replace(prefix+ns+'_', '') %}
{%     set _ = sub_namespaced[ns].update({svar: vars[var]}) %}
{%    endif %}
{%    set _ = namespaced.update({ns: sub_namespaced[ns]}) %}
{%   endfor %}
{%   if not skipped.skip %}
{%    set svar = var.replace(prefix, '') %}
{%    set _ = namespaced.update({svar: vars[var]}) %}
{%   endif %}
{%  endif %}
{% endfor %}

{{ namespaced | to_json }}
