# {{ ansible_managed }}
# {% set data = corpusops_nginx_control_vars %}
# {% set nginx = corpusops_services_http_nginx_vars %}
# {% set http2 = data.get('http2', False) %}
# {% set shttp2 = '' %}
# {% if http2 %}
# {%   set shttp2 = ' http2' %}
# {% endif%}
# {% set default_server='' %}
# {% if data.is_default_server %}
# {% set default_server= data.listen_default_parameter %}
# {% endif %}

include {{data.top_file.format(**vars)}};

{% if data.server_aliases and data.redirect_aliases %}
{% for h in data.server_aliases %}
server {
    listen {{ data.port }} {{default_server}} {{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.port}} {{default_server}} ipv6only=on{{shttp2}};
    {% endif %}
    server_name {{ h }};

    error_log {{data.logdir}}/redirect{{ h }}-error.log {{data.loglevel}};
    access_log  {{data.logdir}}/redirect{{ h }}-access.log {{data.logformat}} if=$method_loggable;

    # feed the map variables for ssl up
    {% if data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}

    set $http_x_ssl $http_x_ssl_resolved;

    rewrite ^(.*)$ http://{{data.server_name}}$1 permanent;
}


{% if data.get('ssl_cert', '') %}
server {
    ssl_ciphers {{data.ssl_ciphers}};
    ssl_session_cache  {{data.ssl_session_cache}};
    ssl_session_timeout {{data.ssl_session_timeout}};
    ssl_protocols       {{data.ssl_protocols}};
    ssl_prefer_server_ciphers on;
    ssl_dhparam {{data.ssl_dhparam}};
{% if data.get('ssl_cert', '') %}
    ssl_certificate {{data.ssl_cert_path}};
{% if data.get('ssl_key', '') %}
    ssl_certificate_key {{data.ssl_key_path}};
{% endif %}
{% endif %}
    ssl on;
    listen {{ data.ssl_port }} {{default_server}} ssl {{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.ssl_port}} {{default_server}} ipv6only=on ssl {{shttp2}};
    {% endif %}

    server_name {{ h }};

    error_log {{data.logdir}}/ssl_redirect{{ h }}-error.log {{data.loglevel}};
    access_log  {{data.logdir}}/ssl_redirect{{ h }}-access.log {{data.logformat}} if=$method_loggable;

    # feed the map variables for ssl up
    {% if data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}

    set $http_x_ssl $http_x_ssl_resolved;

    rewrite ^(.*)$ https://{{data.server_name}}$1 permanent;
}
{% endif%}


{% endfor %}
{% endif %}
server {
    listen {{ data.port }} {{default_server}};
    {% if data.v6 %}
    listen [::]:{{data.port}}  {{ default_server }} ipv6only=on;
    {% endif %}
    server_name {{ data.server_name }}{% if (False == data.redirect_aliases) and data.server_aliases %} {{ data.server_aliases|join(' ') }}{%endif%};

    server_name_in_redirect on;
    error_log {{data.logdir}}/{{ data.small_name }}-error.log {{data.loglevel}};
    access_log  {{data.logdir}}/{{ data.small_name }}-access.log {{data.logformat}} if=$method_loggable;
    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    {% if data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}
    # Member features should be over ssl
    root {{ data.doc_root }};
    {% if data.allowed_hosts %}
    ## Deny illegal Host headers
    if ($host !~* ^({{ data.allowed_hosts|join('|') }})$ ) {
        return 444;
    }
    {% endif %}

    {% if data.get('ssl_redirect', '') %}
    if ($forwarded_ssl_scheme != "https") {
        rewrite ^/.*$ https://{{data.domain}};
    }
    {% endif %}
    include {{nginx.basedir}}/status_vhost.conf;
    include {{data.content_file.format(**vars)}};
}
{% if data.get('ssl_cert', '') %}
server {
    ssl_ciphers {{data.ssl_ciphers}};
    ssl_session_cache  {{data.ssl_session_cache}};
    ssl_session_timeout {{data.ssl_session_timeout}};
    ssl_protocols       {{data.ssl_protocols}};
    ssl_prefer_server_ciphers on;
    ssl_dhparam {{data.ssl_dhparam}};
{% if data.get('ssl_cert', '') %}
    ssl_certificate {{data.ssl_cert_path.format(**vars)}};
{% if data.get('ssl_key', '') %}
    ssl_certificate_key {{data.ssl_key_path.format(**vars)}};
{% endif %}
{% endif %}

    ssl on;
    listen {{ data.ssl_port }} {{default_server}} ssl {{shttp2}};
    {% if data.v6 %}
    listen [::]:{{data.ssl_port}} {{default_server}} ipv6only=on ssl {{shttp2}};
    {% endif %}
    server_name {{ data.server_name }}{% if (False == data.redirect_aliases) and data.server_aliases %} {{ data.server_aliases|join(' ') }}{%endif%};

    server_name_in_redirect on;
    error_log {{data.logdir}}/ssl_{{ data.small_name }}-error.log {{data.loglevel}};
    access_log  {{data.logdir}}/ssl_{{ data.small_name }}-access.log {{data.logformat}} if=$method_loggable;
    # feed the map variables for ssl up
    set $http_x_ssl $http_x_ssl_resolved;
    {% if data.use_real_ip and  data.reverse_proxy_addresses %}
    {% for addr in data.reverse_proxy_addresses %}
    set_real_ip_from {{addr}};
    {% endfor %}
    real_ip_header {{data.real_ip_header}};
    {% endif %}
    # Member features should be over ssl
    root {{ data.doc_root }};
    {% if data.allowed_hosts %}
    ## Deny illegal Host headers
    if ($host !~* ^({{ data.allowed_hosts|join('|') }})$ ) {
        return 444;
    }
    {% endif %}
    include {{nginx.basedir}}/status_vhost.conf;
    include {{data.content_file.format(**vars)}};
}
{% endif%}
