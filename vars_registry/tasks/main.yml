---
# then merge overrides
- name: "resolve overrides -part1- for {{cops_vars_registry_target}}"
  debug:
    var: "{{ cops_vars_registry_overrides }}"
  when: vars[cops_vars_registry_overrides] is defined
  register: cops_reg_overrides1
  no_log: "{{not (cops_vars_registry_debug|default(false))}}"

# setup the registry and set all flatenned values
- name: "construct registry {{cops_vars_registry_target}}"
  include_jinja_vars:
    content: |-
      {#- -#}
      {% set target = cops_vars_registry_target %}
      {% set defaults = cops_vars_registry_defaults %}
      {% set knobs = cops_vars_registry_knobs %}
      {% set sos = cops_vars_registry_subos_append %}
      {% set lowered = cops_vars_registry_lowered %}
      {% set sns = cops_vars_registry_sub_namespaced %}
      {% set un = cops_vars_registry_update_namespaces %}
      {% set n = cops_vars_registry_name %}
      {% set o = cops_vars_registry_overrides %}
      {% set prefix = cops_vars_registry_prefix %}
      {% set flavors = cops_vars_registry_flavors %}
      {% set fr = cops_vars_registry_format_resolve %}
      {% set gs = cops_vars_registry_global_scope %}
      {% set lo = cops_vars_registry_load_overrides %}
      {% set _ = vars.update({o: cops_reg_overrides1.get(o, {})}) %}
      {% set res = lookup('cops_registry',
          prefix, do_load_overrides=lo,
          do_format_resolve=fr,
          do_update_namespaces=un,
          global_scope=gs,
          lowered=lowered,
          computed_defaults=defaults,
          sub_namespaced=sns,
          knobs=knobs,
          flavors=flavors,
          subos_append=sos,
          overrides_prefix=o,
          update=False,
          name_prefix=n) %}
      {{ res | to_json }}
  register: cops_registry_done
  no_log: "{{not (cops_vars_debug|default(false))}}"
