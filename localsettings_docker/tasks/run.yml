---
#
- name: install localsettings_docker repokey
  apt_key:
    url: '{{corpusops_localsettings_docker_vars.repo_keys_url}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_docker_vars.repo_keys is not none and
          corpusops_localsettings_docker_vars.repo_keys|length > 0)"
  ignore_errors: true
  register: corpusops_localsettings_docker_key
- name: "Alternative | Add Docker apt key."
  shell: >
    curl -sSL "{{corpusops_localsettings_docker_vars.repo_keys_url}}"
    |sudo apt-key add -
  when: corpusops_localsettings_docker_key|failed
- name: remove docker setup
  file:
    path:  /etc/apt/sources.list.d/docker.list
    state: absent
  when: "(ansible_os_family.lower() in ['debian'] and
          ansible_env.get('TRAVIS', '') | copsf_bool)"
- name: debug travis
  shell: |
        cd /etc/apt/sources.list.d
        for i in *;do
          echo "----LIST: $i----"
          cat "$i"
        done
  when: "(ansible_os_family.lower() in ['debian'] and
          ansible_env.get('TRAVIS', '') | copsf_bool)"
- name: install localsettings_docker repo
  apt_repository:
    repo: '{{corpusops_localsettings_docker_vars.repo}}'
    filename: localsettings_docker
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_docker_vars.repo is not none)"
  register: corpusops_localsettings_docker_repoa
- apt: {update_cache: yes}
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_docker_repoa.changed or
          corpusops_localsettings_docker_key.changed)"
- name: install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: "{{dockeriteml}}"
    state: present
  with_items: '{{corpusops_localsettings_docker_vars.packages}}'
  loop_control: {loop_var: dockeriteml}
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_docker_vars.packages is not none and
          corpusops_localsettings_docker_vars.packages|length > 0)"
  register: corpusops_localsettings_docker_c_pkg_deb
- name: update & install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: '{{dockeritemk}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_docker_vars.packages is not none and
          corpusops_localsettings_docker_vars.packages|length > 0)"
  with_items: "{{corpusops_localsettings_docker_vars.packages}}"
  loop_control: {loop_var: dockeritemk}
- name: update & install prerequisites (yum-utils)
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: 'yum-utils'
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_localsettings_docker_vars.packages is not none and
          corpusops_localsettings_docker_vars.packages|length > 0)"
- name: repo
  shell: |
         yum-config-manager --add-repo "{{dockeritemi}}"
  with_items: ["{{corpusops_localsettings_docker_vars.repo}}"]
  loop_control: {loop_var: dockeritemi}
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_localsettings_docker_vars.packages is not none and
          corpusops_localsettings_docker_vars.packages|length > 0)"
- name: update & install prerequisites
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: "{{corpusops_localsettings_docker_vars.packages}}"
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_localsettings_docker_vars.packages is not none and
          corpusops_localsettings_docker_vars.packages|length > 0)"
  register: corpusops_localsettings_docker_c_pkg_rh
  loop_control: {loop_var: dockeritemh}
- name: install python pre - prerequisites
  pip:
    executable: /usr/bin/pip
    name: "{{corpusops_localsettings_docker_vars.py_packages}}"
    state: present
- group:
    name: "{{corpusops_localsettings_docker_vars.group}}"
    system: yes
    state: present
  register: corpusops_localsettings_docker_c_group
- include_role: {name: corpusops.roles/configs, private: true}
  vars:
    cops_configs_files: "{{corpusops_localsettings_docker_vars.files}}"
    cops_configs_copys: "{{corpusops_localsettings_docker_vars.filescopy}}"
    cops_configs_templates: "{{corpusops_localsettings_docker_vars.configs}}"
  tags: [docker_configs]
- set_fact:
    cacheable: false
    corpusops_localsettings_docker_c_files: "{{cops_configs_files_results}}"
    corpusops_localsettings_docker_c_filesc: "{{cops_configs_copys_results}}"
    corpusops_localsettings_docker_c_configs: "{{cops_configs_templates_results}}"
  tags: [docker_configs]
- set_fact:
    cacheable: false
    corpusops_localsettings_docker_configs_changed: "{{(
      corpusops_localsettings_docker_c_pkg_rh|changed or
      corpusops_localsettings_docker_c_pkg_deb|changed or
      corpusops_localsettings_docker_c_group|changed or
      corpusops_localsettings_docker_c_files|changed or
      corpusops_localsettings_docker_c_filesc|changed or
      corpusops_localsettings_docker_c_configs|changed)}}"
