---
- name: update & install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: '{{item}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_localsettings_kubectl_vars.packages is not none and
          corpusops_localsettings_kubectl_vars.packages|length > 0)"
  with_items: "{{corpusops_localsettings_kubectl_vars.packages}}"
- name: update & install prerequisites
  package:
    update_cache: yes
    name: '{{item}}'
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_localsettings_kubectl_vars.packages is not none and
          corpusops_localsettings_kubectl_vars.packages|length > 0)"
  with_items: "{{corpusops_localsettings_kubectl_vars.packages}}"
- name: files
  file:
    path: "{{item.path}}"
    state: "{{item.state|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
  with_items: "{{corpusops_localsettings_kubectl_vars.files}}"
  when: "(corpusops_localsettings_kubectl_vars.files is not none and
          corpusops_localsettings_kubectl_vars.files|length > 0)"
- name: configs
  template:
    src: "{{item.src|default('../templates/'+item.name)}}"
    dest: "{{item.dest|default(item.name)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    trim_blocks: "{{item.trim_blocks|default(False)}}"
  with_items: "{{corpusops_localsettings_kubectl_vars.configs}}"
  when: "(corpusops_localsettings_kubectl_vars.configs is not none and
          corpusops_localsettings_kubectl_vars.configs|length > 0)"
- uri:
    url: "{{corpusops_localsettings_kubectl_vars.version_getter.format(
           version=corpusops_localsettings_kubectl_vars.version)}}"
    return_content: true
  register: corpusops_localsettings_kubectl_getted_version_
  when: "corpusops_localsettings_kubectl_vars.version in ['stable']"
- set_fact:
    corpusops_localsettings_kubectl_getted_version: "{{corpusops_localsettings_kubectl_getted_version_.content.strip()}}"
  when: "corpusops_localsettings_kubectl_vars.version in ['stable']"
- set_fact:
    corpusops_localsettings_kubectl_getted_version: "{{corpusops_localsettings_kubectl_vars.version}}"
  when: "corpusops_localsettings_kubectl_vars.version not in ['stable']"
- file:
    path: "{{_corpusops_localsettings_kubectl_app_path}}"
    state: directory
    mode: "0755"
  vars:
    version: "{{corpusops_localsettings_kubectl_getted_version}}"
- stat:
    path: "{{_corpusops_localsettings_kubectl_app_path}}/kubectl"
  register: corpusops_localsettings_kubectl_getted_f
  vars:
    version: "{{corpusops_localsettings_kubectl_getted_version}}"
    platform: "{{corpusops_localsettings_kubectl_vars.platform}}"
    arch: "{{corpusops_localsettings_kubectl_vars.arch}}"
- get_url:
    force: true
    url: "{{_corpusops_localsettings_kubectl_archive}}"
    dest: "{{_corpusops_localsettings_kubectl_app_path}}"
    mode: "0755"
  vars:
    version: "{{corpusops_localsettings_kubectl_getted_version}}"
    platform: "{{corpusops_localsettings_kubectl_vars.platform}}"
    arch: "{{corpusops_localsettings_kubectl_vars.arch}}"
  when: "not corpusops_localsettings_kubectl_getted_f.stat.exists"
- include_role: {name: corpusops.roles/set_alternatives}
  vars:
    version: "{{corpusops_localsettings_kubectl_getted_version}}"
    alternatives: "{{_corpusops_localsettings_kubectl_alternatives}}"
  when: "corpusops_localsettings_kubectl_getted_version is not none"
