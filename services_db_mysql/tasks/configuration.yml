---
- when: "not (corpusops_services_db_mysql_vars.cert|copsf_asbool)"
  tags: [mysql_crt, mysql_crt_main]
  block:
  - include_role: {name: corpusops.roles/ssl_ca_signed_cert}
    loop:
      - cn: "{{corpusops_services_db_mysql_vars.cert_domain}}"
        owner: root
        ca_name: mysql
        group: "{{corpusops_services_db_mysql_vars.group}}"
        dest_cert_full_path: "{{corpusops_services_db_mysql_vars.cert_full_path}}"
        dest_cert_path: "{{corpusops_services_db_mysql_vars.cert_path}}"
        dest_key_path: "{{corpusops_services_db_mysql_vars.cert_key_path}}"
        days: "{{corpusops_services_db_mysql_vars.cert_days}}"
        subject: "{{corpusops_services_db_mysql_vars.cert_subject}}"
    loop_control: {loop_var: _ssl_ca_signed_cert}
- when: "corpusops_services_db_mysql_vars.cert|copsf_asbool"
  tags: [mysql_crt, mysql_crt_selfsigned]
  block:
  - copy:
      force: true
      owner: root
      group: "{{corpusops_services_db_mysql_vars.group}}"
      content: "{{corpusops_services_db_mysql_vars.cert}}"
      dest: "{{corpusops_services_db_mysql_vars.cert_path}}"
  - copy:
      force: true
      owner: root
      group: "{{corpusops_services_db_mysql_vars.group}}"
      content: "{{corpusops_services_db_mysql_vars.cert_key}}"
      dest: "{{corpusops_services_db_mysql_vars.cert_key_path}}"
  - copy:
      force: true
      owner: root
      group: "{{corpusops_services_db_mysql_vars.group}}"
      content: "{{corpusops_services_db_mysql_vars.cert+
                  corpusops_services_db_mysql_vars.cert_key}}"
      dest: "{{corpusops_services_db_mysql_vars.cert_full_path}}"
- include_tasks: ../../services_db_mysql_vars/tasks/version.yml
- name: files
  file:
    path: "{{item.path}}"
    state: "{{item.state|default(omit)}}"
    src: "{{item.src|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    recurse: "{{item.recurse|default(omit)}}"
  loop: "{{corpusops_services_db_mysql_vars.files|flatten(levels=1)}}"
  when: "(corpusops_services_db_mysql_vars.files is not none and
          corpusops_services_db_mysql_vars.files|length > 0)"
  register: corpusops_services_db_mysql_filest
  tags: [corpusops_services_db_mysql_files]
- name: files copy
  copy:
    dest: "{{item.dest|default(omit)}}"
    src: "{{item.template
            | default('../templates/'+item.dest)}}"
    force: "{{item.get('force', True)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    recurse: "{{item.recurse|default(omit)}}"
  loop: "{{corpusops_services_db_mysql_vars.filescopy|flatten(levels=1)}}"
  when: "(corpusops_services_db_mysql_vars.filescopy is not none and
          corpusops_services_db_mysql_vars.filescopy|length > 0)"
  register: corpusops_services_db_mysql_filesct
  tags: [corpusops_services_db_mysql_filescopy]
- name: configs
  template:
    src: "{{item.template
            | default('../templates/'+item.name)}}"
    dest: "{{item.name}}"
    mode: "{{item.mode|default(omit)}}"
    force: "{{item.force|default(True)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    trim_blocks: "{{item.trim_blocks|default(False)}}"
  loop: "{{corpusops_services_db_mysql_vars.configs|flatten(levels=1)}}"
  when: "(corpusops_services_db_mysql_vars.configs is not none and
          corpusops_services_db_mysql_vars.configs|length > 0)"
  register: corpusops_services_db_mysql_configst
  tags: [corpusops_services_db_mysql_configs]
- set_fact:
    cacheable: false
    corpusops_services_db_mysql_configs_changed: "{% set c = {'changed': False}%}{{(
     ((corpusops_services_db_mysql_filest  |default(c)) is changed) or
     ((corpusops_services_db_mysql_filesct |default(c)) is changed) or
     ((corpusops_services_db_mysql_configst|default(c)) is changed))}}"
  tags: [corpusops_services_db_mysql_facts]
