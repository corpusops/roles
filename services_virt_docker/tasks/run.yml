---
# install prerequisites on trusty
- file:
    path: /etc/apt/sources.list.d/services_virt_docker.list.list
    state: absent
- name: install pre -py- prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: "{{dockeritema}}"
    state: present
  with_items: [python-pip, python-dev, libffi-dev, libssl-dev]
  loop_control: {loop_var: dockeritema}
  when: "(ansible_distribution.lower() in ['ubuntu'] and
          ansible_distribution_major_version < '15' )"
  tags: corpusops_services_virt_docker
- name: install python pre - prerequisites
  pip:
    executable: /usr/bin/pip
    name: "{{ dockeritemb }}"
    state: present
  with_items: [urllib3, pyopenssl, ndg-httpsclient, pyasn1]
  loop_control: {loop_var: dockeritemb}
  when: "(ansible_distribution.lower() in ['ubuntu'] and
          ansible_distribution_major_version < '15' )"
  tags: corpusops_services_virt_docker
#
- name: install pre - prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: "{{dockeritemc}}"
    state: present
  with_items: [apt-transport-https, ca-certificates, curl]
  loop_control: {loop_var: dockeritemc}
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
  tags: corpusops_services_virt_docker
- name: install services_virt_docker repokey
  apt_key:
    url: '{{corpusops_services_virt_docker_vars.repo_keys_url}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_vars.repo_keys is not none and
          corpusops_services_virt_docker_vars.repo_keys|length > 0)"
  register: corpusops_services_virt_docker_key
  tags: corpusops_services_virt_docker
- name: remove docker setup
  file:
    path:  /etc/apt/sources.list.d/docker.list
    state: absent
  when: "(ansible_os_family.lower() in ['debian'] and
          ansible_env.get('TRAVIS', '') | copsf_bool)"
  tags: corpusops_services_virt_docker
- name: debug travis
  shell: |
        cd /etc/apt/sources.list.d
        for i in *;do
          echo "----LIST: $i----"
          cat "$i"
        done
  when: "(ansible_os_family.lower() in ['debian'] and
          ansible_env.get('TRAVIS', '') | copsf_bool)"
  tags: corpusops_services_virt_docker
- name: install services_virt_docker repo
  apt_repository:
    repo: '{{corpusops_services_virt_docker_vars.repo}}'
    filename: services_virt_docker
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_vars.repo is not none)"
  register: corpusops_services_virt_docker_repoa
  tags: corpusops_services_virt_docker
- apt:
    update_cache: yes
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_repoa.changed or
          corpusops_services_virt_docker_key.changed)"
  tags: corpusops_services_virt_docker
- name: install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: "{{dockeriteml}}"
    state: present
  with_items: '{{corpusops_services_virt_docker_vars.packages}}'
  loop_control: {loop_var: dockeriteml}
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
  tags: corpusops_services_virt_docker
  notify: [restart_corpusops_services_virt_docker]
- name: update & install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: '{{dockeritemk}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
  tags: corpusops_services_virt_docker
  with_items: "{{corpusops_services_virt_docker_vars.packages}}"
  loop_control: {loop_var: dockeritemk}
- name: update & install prerequisites (yum-utils)
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: 'yum-utils'
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
  tags: corpusops_services_virt_docker
- name: repo
  shell: |
         yum-config-manager --add-repo "{{dockeritemi}}"
  with_items: ["{{corpusops_services_virt_docker_vars.repo}}"]
  loop_control: {loop_var: dockeritemi}
  tags: corpusops_services_virt_docker
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
- name: update & install prerequisites
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: '{{dockeritemh}}'
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_virt_docker_vars.packages is not none and
          corpusops_services_virt_docker_vars.packages|length > 0)"
  tags: corpusops_services_virt_docker
  with_items: "{{corpusops_services_virt_docker_vars.packages}}"
  loop_control: {loop_var: dockeritemh}
- group:
    name: "{{corpusops_services_virt_docker_vars.group}}"
    system: yes
    state: present
  notify: [restart_corpusops_services_virt_docker]
  tags: corpusops_services_virt_docker
- name: files
  file:
    path: "{{dockeritemd.path}}"
    state: "{{dockeritemd.state|default(omit)}}"
    src: "{{dockeritemd.src|default(omit)}}"
    mode: "{{dockeritemd.mode|default(omit)}}"
    owner: "{{dockeritemd.owner|default(omit)}}"
    group: "{{dockeritemd.group|default(omit)}}"
    recurse: "{{dockeritemd.recurse|default(omit)}}"
  with_items: "{{corpusops_services_virt_docker_vars.files}}"
  loop_control: {loop_var: dockeritemd}
  when: "(corpusops_services_virt_docker_vars.files is not none and
          corpusops_services_virt_docker_vars.files|length > 0)"
  tags: corpusops_services_virt_docker
  notify: [restart_corpusops_services_virt_docker]
- name: files copy
  copy:
    dest: "{{dockeriteme.dest|default(omit)}}"
    src: "{{dockeriteme.template
            | default('../templates/'+dockeriteme.dest)}}"
    force: "{{dockeriteme.get('force', True)}}"
    mode: "{{dockeriteme.mode|default(omit)}}"
    owner: "{{dockeriteme.owner|default(omit)}}"
    group: "{{dockeriteme.group|default(omit)}}"
    recurse: "{{dockeriteme.recurse|default(omit)}}"
  with_items: "{{corpusops_services_virt_docker_vars.filescopy}}"
  loop_control: {loop_var: dockeriteme}
  when: "(corpusops_services_virt_docker_vars.filescopy is not none and
          corpusops_services_virt_docker_vars.filescopy|length > 0)"
  tags: corpusops_services_virt_docker
  notify: [restart_corpusops_services_virt_docker]
- name: configs
  template:
    src: "{{dockeritemf.template
            | default('../templates/'+dockeritemf.name)}}"
    dest: "{{dockeritemf.name}}"
    mode: "{{dockeritemf.mode|default(omit)}}"
    owner: "{{dockeritemf.owner|default(omit)}}"
    group: "{{dockeritemf.group|default(omit)}}"
    trim_blocks: "{{dockeritemf.trim_blocks|default(False)}}"
  with_items: "{{corpusops_services_virt_docker_vars.configs}}"
  loop_control: {loop_var: dockeritemf}
  when: "(corpusops_services_virt_docker_vars.configs is not none and
          corpusops_services_virt_docker_vars.configs|length > 0)"
  tags: corpusops_services_virt_docker
  notify: [restart_corpusops_services_virt_docker]
- service:
    state: "{{corpusops_services_virt_docker_vars.activated
              | ternary('started', 'stopped')}}"
    enabled: "{{corpusops_services_virt_docker_vars.activated
                | ternary(True, False)}}"
    name: "{{dockeritemg}}"
  with_items: "{{corpusops_services_virt_docker_vars.services}}"
  loop_control: {loop_var: dockeritemg}
  tags: corpusops_services_virt_docker
  when: "corpusops_vars.has_services_manager"
- meta: flush_handlers
