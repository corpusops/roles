---
- name: install services_db_mysql repokey
  apt_key:
    id: '{{item}}'
    keyserver: "{{corpusops_services_db_mysql_vars.keyserver}}"
    state: present
  loop: '{{corpusops_services_db_mysql_vars.repo_keys}}'
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_db_mysql_vars.repo_keys is not none and
          corpusops_services_db_mysql_vars.repo_keys|length > 0)"
  register: corpusops_services_db_mysql_key
- name: install services_db_mysql repo
  apt_repository:
    repo: '{{corpusops_services_db_mysql_vars.repo}}'
    filename: services_db_mysql
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
           corpusops_services_db_mysql_vars.repo is not none)"
  register: corpusops_services_db_mysql_repoa
- apt:
    update_cache: yes
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_db_mysql_repoa.changed or
          corpusops_services_db_mysql_key.changed)"
- name: repo
  shell: |
         yum-config-manager --add-repo "{{item}}"
  loop: "{{[corpusops_services_db_mysql_vars.repo]|flatten(levels=1)}}"
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_db_mysql_vars.client_packages is not none and
          corpusops_services_db_mysql_vars.client_packages|length > 0)"
- apt:
    update_cache: yes
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_db_mysql_repoa.changed or
          corpusops_services_db_mysql_key.changed )"
