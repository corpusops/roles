---
- include_role: {name: corpusops.roles/services_db_postgresql_pkgmgr}
  tags: [postgresql_pkgmgr]
- include_role: {name: corpusops.roles/services_db_postgresql_client}
  tags: [postgresql_client]
- name: "update & install pgsql-common (debian)"
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: [postgresql-common]
    state: present
  when: "(ansible_os_family.lower() in ['debian'])"
- name: "update & install pgsql-common (redhat)"
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: [postgresql-common]
    state: present
  when: "(ansible_os_family.lower() in ['redhat'])"
- name: maybe disable cluster creation
  shell: |
    if [ -e /etc/postgresql-common/createcluster.conf ] && (
       egrep -q '#?(create_main_cluster) ' \
       /etc/postgresql-common/createcluster.conf; );then
      sed -i -re "s/#?(create_main_cluster) .*$/\1 = false/" \
        /etc/postgresql-common/createcluster.conf &&\
        echo changedcreatecluster >&2
    fi
  when: "corpusops_services_db_postgresql_vars.disable_cluster_creation"
  register: _corpusops_services_db_postgresql_createclus
  changed_when: "'changedcreatecluster' in _corpusops_services_db_postgresql_createclus.stderr"
#
- name: install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: '{{corpusops_services_db_postgresql_vars.packages}}'
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_db_postgresql_vars.packages is not none and
          corpusops_services_db_postgresql_vars.packages|length > 0)"
  register: corpusops_services_db_postgresql_pkgst
- name: update & install prerequisites
  package:
    cache_valid_time: '{{60*60}}'
    update_cache: yes
    name: "{{corpusops_services_db_postgresql_vars.packages|flatten(levels=1)}}"
    state: present
  when: "(ansible_os_family.lower() in ['debian'] and
          corpusops_services_db_postgresql_vars.packages is not none and
          corpusops_services_db_postgresql_vars.packages|length > 0)"
- name: update & install prerequisites (yum-utils)
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: 'yum-utils'
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_db_postgresql_vars.packages is not none and
          corpusops_services_db_postgresql_vars.packages|length > 0)"
- name: repo
  shell: |
    yum-config-manager --add-repo "{{item}}"
  loop: "{{[corpusops_services_db_postgresql_vars.repo]|flatten(levels=1)}}"
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_db_postgresql_vars.packages is not none and
          corpusops_services_db_postgresql_vars.packages|length > 0)"
- name: update & install prerequisites
  package:
    update_cache: yes
    enablerepo: epel-testing
    name: "{{corpusops_services_db_postgresql_vars.packages|flatten(levels=1)}}"
    state: present
  when: "(ansible_os_family.lower() in ['redhat'] and
          corpusops_services_db_postgresql_vars.packages is not none and
          corpusops_services_db_postgresql_vars.packages|length > 0)"
- group:
    name: "{{corpusops_services_db_postgresql_vars.group}}"
    system: yes
    state: present
  when: "corpusops_services_db_postgresql_vars.group"
- user:
    name: "{{corpusops_services_db_postgresql_vars.user}}"
    system: yes
    groups: "{{corpusops_services_db_postgresql_vars.group}}"
    append: true
  when: "corpusops_services_db_postgresql_vars.user"
- set_fact:
    cacheable: false
    corpusops_services_db_postgresql_prequisites_changed: "{{( corpusops_services_db_postgresql_pkgst or corpusops_services_db_postgresql_ppkgst )}}"
