---
- stat: {path: "{{ssl_selfsigned_cert_vars.dest_cert_path}}"}
  register: "corpusops_c_testex_ssign_cert"
- when: "ssl_selfsigned_cert_vars.force or not corpusops_c_testex_ssign_cert.stat.exists"
  name: "Generate ssl_selfsigned cert for {{ssl_selfsigned_cert_vars.cn}}"
  block:
  - file:
      state: directory
      path: "{{item|copsf_dirname}}"
    with_items:
      - "{{ssl_selfsigned_cert_vars.gen_key_path}}"
      - "{{ssl_selfsigned_cert_vars.gen_cert_path}}"
      - "{{ssl_selfsigned_cert_vars.dest_key_path}}"
      - "{{ssl_selfsigned_cert_vars.dest_cert_full_path}}"
      - "{{ssl_selfsigned_cert_vars.dest_key_path}}"
  - shell: |-
      {% set c = ssl_selfsigned_cert_vars.gen_cert_path %}
      {% set k = ssl_selfsigned_cert_vars.gen_key_path %}
      {% set scns = [] %}
      {% for i in ([ssl_selfsigned_cert_vars.cn] + ssl_selfsigned_cert_vars.cns)|copsf_uniquify %}
      {%  set _ = scns.append("DNS:{0}".format(i)) %}
      {% endfor %}
      set -x
      {% if not ssl_selfsigned_cert_vars.force %}
      if [ ! -e "{{k}}" ] || [ ! -e "{{c}}" ];then
      {% endif %}
      f=$(mktemp)\
      && for i in "{{k}}" "{{c}}";do if [ -e "$i" ];then rm -fv "$i";fi;done \
      && cat "{{vars['ssl_selfsigned_openssl_config']}}">"$f"\
      && printf "\n[SAN]\nsubjectAltName={{scns|join(',')}}">>"$f"\
      && openssl req -x509 -config "$f" \
        {{ssl_selfsigned_cert_vars.openssl_args}} \
        -subj "{{ssl_selfsigned_cert_vars.subject}}" \
        -days "{{ssl_selfsigned_cert_vars.days}}" \
        -keyout "{{k}}" -out "{{c}}"  \
      && echo changed >&2
      if [ -e "$f" ];then rm -fv "$f";fi
      {% if not ssl_selfsigned_cert_vars.force %}
      fi
      {% endif %}
      exit $?
    args: {executable: /bin/bash}
    register: _cops_ssl_g
    changed_when: "'changed' in _cops_ssl_g.stderr"
  - shell: "cat {{ssl_selfsigned_cert_vars.gen_cert_path}}"
    register: cert
    no_log: "{{not (cops_secret_vars_debug|default(false))}}"
    changed_when: false
  - shell: "cat {{ssl_selfsigned_cert_vars.gen_key_path}}"
    register: key
    no_log: "{{not (cops_secret_vars_debug|default(false))}}"
    changed_when: false
  - copy:
      mode: "0640"
      dest: "{{ssl_selfsigned_cert_vars.dest_cert_path}}"
      content: "{{cert.stdout}}"
      force: true
      owner: "{{ssl_selfsigned_cert_vars.owner or omit}}"
      group: "{{ssl_selfsigned_cert_vars.group or omit}}"
    when:
    - "vars['ssl_selfsigned_cert_gen_cert_path'] != vars['ssl_selfsigned_cert_dest_cert_path']"
  - copy:
      mode: "0640"
      dest: "{{ssl_selfsigned_cert_vars.dest_key_path}}"
      content: "{{key.stdout}}"
      force: true
      owner: "{{ssl_selfsigned_cert_vars.owner or omit}}"
      group: "{{ssl_selfsigned_cert_vars.group or omit}}"
    when:
    - "vars['ssl_selfsigned_cert_gen_key_path'] != vars['ssl_selfsigned_cert_gen_key_path']"
  - copy:
      mode: "0640"
      dest: "{{ssl_selfsigned_cert_vars.dest_cert_full_path}}"
      content: "{{cert.stdout+'\n'+key.stdout}}"
      force: true
      owner: "{{ssl_selfsigned_cert_vars.owner or omit}}"
      group: "{{ssl_selfsigned_cert_vars.group or omit}}"
    when:
    - "vars['ssl_selfsigned_cert_has_full_cert']"
