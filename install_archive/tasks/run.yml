---
# LAYOUT
- name: files
  file:
    path: "{{iitem}}"
    state: "directory"
    mode: "0755"
  loop_control: {loop_var: iitem}
  with_items: [ "{{archive_vars.app_path}}"]
- name: "existing archive test"
  stat:
    path: "{{'/'.join([archive_vars.app_path, iiitem])}}"
  register: install_one_filet
  with_items: "{{archive_vars.filetest}}"
  loop_control: {loop_var: iiitem}
- debug:
   msg: |-
    {% set crc = ((archive_vars.urls.archive_crc | default('')) or '' )| length > 0 %}
    {% set ret = {'done': True,
                  'crc': crc,
                  'verify_gpg': archive_vars.urls.verify_gpg|default([]),
                  'verify_sha1': (
                    archive_vars.urls.verify_sha1|default(False)|d and crc),
                  'verify_sha256': (
                    archive_vars.urls.verify_sha256|default(False)|d and crc)} %}
    {% if not install_one_filet.results %}
    {%   set _ = ret.update({'done': False}) %}
    {% endif %}
    {% for i in install_one_filet.results %}
    {%  if not i.stat.exists %}
    {%   set _ = ret.update({'done': False}) %}
    {%  endif %}
    {% endfor %}
    {{ ret | to_json }}
  register: corpusops_uo_tests
  changed_when: False

# Download GPG keys if any
- include_tasks: "../playbooks/utils/add_gpg_keys.yml"
  vars:
    keys: "{{corpusops_uo_tests.msg.verify_gpg}}"
  loop_control: {loop_var: keyitem}
  changed_when: false
  with_items: "{{corpusops_uo_tests.msg.verify_gpg}}"
  when:  "(corpusops_uo_tests.msg.verify_gpg is not none and
           corpusops_uo_tests.msg.verify_gpg|length > 0)"

# DOWNLOAD CRC FILE
- name: get CRCs file
  get_url:
    url: "{{archive_vars.urls.archive_crc}}"
    remote_src: true
    dest: "{{archive_vars.app_path}}/crcs"
    mode: "{{archive_vars.mode}}"
    force: true
  when: "(corpusops_uo_tests.msg.crc and
          archive_vars.urls.archive_crc.startswith('http') and
          not corpusops_uo_tests.msg.done)"

- name: record CRCs
  shell: |
    if [ ! -e "{{archive_vars.app_path}}" ];then mkdir "{{archive_vars.app_path}}";fi
    echo "{{archive_vars.urls.archive_crc}} {{archive_basename}}" > "{{archive_vars.app_path}}/crcs"
    chmod 0644 "{{archive_vars.app_path}}/crcs"
  changed_when: false
  when: "(corpusops_uo_tests.msg.crc and
          not archive_vars.urls.archive_crc.startswith('http') and
          not corpusops_uo_tests.msg.done)"

- name: get sha mode
  register: install_shamode
  debug:
    msg: |-
      {%- if corpusops_uo_tests.msg.verify_sha1 %}sha1
      {%- elif corpusops_uo_tests.msg.verify_sha256 %}sha256
      {%- else %}
      {%- endif %}

# SHA integrity verification case
- name: get SHA from CRCs file
  shell: |
         grep "{{archive_basename}}" "{{archive_vars.app_path}}/crcs"
  register: install_one_shas
  changed_when: false
  when: "((corpusops_uo_tests.msg.verify_sha256 or
           corpusops_uo_tests.msg.verify_sha1) and
          not corpusops_uo_tests.msg.done)"
- name: "test shas"
  stat:
    path: "{{archive_vars.app_path}}/{{archive_basename}}"
    get_checksum: True
    checksum_algorithm: "{{install_shamode.msg}}"
  register: install_one_archivet
  when: "((corpusops_uo_tests.msg.verify_sha256 or corpusops_uo_tests.msg.verify_sha1) and
           not corpusops_uo_tests.msg.done)"

# GET  ARCHIVE
- debug:
    msg: |
      {% if not (corpusops_uo_tests.msg.verify_sha256 or corpusops_uo_tests.msg.verify_sha1 ) %}
      {%    set ret = False %}
      {% else %}
      {%  if corpusops_uo_tests.msg.done %}
      {%    set ret = False %}
      {%  elif not install_one_archivet.stat.exists %}
      {%    set ret = True %}
      {%  else %}
      {%    set ret = (install_one_archivet.stat.checksum == install_one_shas.stdout.split()[0]) %}
      {%  endif %}
      {% endif %}
      {{ {'r': ret} | to_json }}
  changed_when: False
  register: install_one_archivetr
- debug: {msg: "{{archive_vars.app_path}}"}
- name: get archive - SHA CRC
  get_url:
    remote_src: true
    url: "{{archive_vars.urls.archive}}"
    dest: "{{archive_vars.app_path}}/{{archive_basename}}"
    mode: "{{archive_vars.mode}}"
    checksum: "{{install_shamode.msg}}:{{install_one_shas.stdout.split()[0]}}"
  when: "not corpusops_uo_tests.msg.done and install_one_archivetr.msg.r"
  changed_when: false
- name: get archive - NOCHECK included
  get_url:
    remote_src: true
    url: "{{archive_vars.urls.archive}}"
    dest: "{{archive_vars.app_path}}/{{archive_basename}}"
    mode: "{{archive_vars.mode}}"
  when: "(not corpusops_uo_tests.msg.done and
          not corpusops_uo_tests.msg.verify_sha1 and
          not corpusops_uo_tests.msg.verify_sha256)"
  changed_when: false
- name: GPG check if any
  shell: |
    gpg_() { export LANG=C; export LC_ALL=C; gpg ${@}; };
    if ! ( gpg_ -q --batch --verify \
              "{{archive_vars.app_path}}/crcs" \
              "{{archive_vars.app_path}}/{{archive_basename}}"; );then
      if [ -e "{{archive_vars.app_path}}/{{archive_basename}}" ];then
        echo rm -f "{{archive_vars.app_path}}/{{archive_basename}}";
      fi;
      echo "archive verification failed" >&2;
      exit 1;
    else
      echo "archive verified" >&2;
      exit 0;
    fi
  when: "(not corpusops_uo_tests.msg.done and
          corpusops_uo_tests.msg.verify_gpg and
          corpusops_uo_tests.msg.crc)"
  changed_when: false

# UNPACK
- name: unarchive
  unarchive:
    remote_src: true
    keep_newer: true
    src: "{{'{d}/{bn}'.format(**liitem)}}"
    extra_opts: |-
      {% set opts = [] %}
      {% set src = '{d}/{bn}'.format(**liitem) %}
      {% if (
        '.tbz2' in src  or
        '.tar.bz2' in src  or
        '.tar.gz' in src  or
        '.tgz' in src  or
        '.tar.xz' in src  or
        '.txz' in src  or
        '.tar' in src
      ) %}{% set opts = [
        '--strip-components={0}'.format(archive_vars.strip_components)
      ] %}{% endif %}
      {{ opts | to_json }}
    dest: "{{liitem.d}}"
    force: true
  loop_control: {loop_var: liitem}
  when: |
        archive_vars.urls.unpack and (
        ('.tbz2' in liitem.bn) or
        ('.tar.bz2' in liitem.bn) or
        ('.bz2' in liitem.bn) or
        ('.tar' in liitem.bn) or
        ('.tgz' in liitem.bn) or
        ('.tar.gz' in liitem.bn) or
        ('.gz' in liitem.bn) or
        ('.gzip' in liitem.bn) or
        ('.lzma' in liitem.bn) or
        ('.zip' in liitem.bn) or
        ('.7z' in liitem.bn) or
        ('.txz' in liitem.bn) or
        ('.tar.xz' in liitem.bn) or
        ('.xz' in liitem.bn)
        ) and not corpusops_uo_tests.msg.done
  with_items: [{d: "{{archive_vars.app_path}}", bn: "{{archive_basename}}"}]

