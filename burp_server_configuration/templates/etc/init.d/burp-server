#!/bin/sh
# {{ansible_managed }}
# {% set d = cops_burp_vars %}
### BEGIN INIT INFO
# Provides:          burp-server-{{d.name}}
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: backup and restore program {{d.name}}
# Description:       Burp is a backup and restore program. It uses librsync in order to save onr
#                    the amount of space that is used by each backup. It also uses VSS (Volumer
#                    Shadow Copy Service) to make snapshots when backing up Windows computers.
#                    Author Patrick Koppen <software@koppen.de>
### END INIT INFO


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC=burp-server-{{d.name}}            # Introduce a short description here
NAME=burp-server-{{d.name}}            # Introduce the short server's name here
DAEMON=/usr/sbin/burp # Introduce the server's location here
DAEMON_ARGS=""             # Arguments to run the daemon with
PIDFILE={{d.pidfile}}
SCRIPTNAME=/etc/init.d/$NAME
CONFIG={{d.configfile_server}}

# Exit if the package is not installed
[ -x $DAEMON ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ "x$RUN" != "xyes" ] ; then
    echo "$NAME disabled; edit /etc/default/$NAME"
    exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

is_container() {
    cat -e /proc/1/environ 2>/dev/null|grep -q container=
    echo "${?}"
}

filter_host_pids() {
    pids=""
    if [ "x$(is_container)" = "x0" ];then
        pids="${pids} $(echo "${@}")"
    else
        for pid in ${@};do
            if [ "x$(grep -q /lxc/ /proc/${pid}/cgroup 2>/dev/null;echo "${?}")" != "x0" ];then
                pids="${pids} $(echo "${pid}")"
            fi
         done
    fi
    echo "${pids}" | sed -e "s/\(^ \+\)\|\( \+$\)//g"
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    ulimit -f unlimited
    ulimit -t unlimited
    ulimit -v unlimited
    ulimit -n 64000
    ulimit -m unlimited

    # In dash, ulimit takes -p for maximum user processes
    # In bash, it's -u
    if readlink /proc/$$/exe | grep -q dash
    then
        ulimit -p 32000
    else
        ulimit -u 32000
    fi
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=USR2/5/TERM/5/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
    if [ "x${CONFIG}" != "x" ];then
        for i in $(filter_host_pids $(ps aux|grep -v grep|grep ${CONFIG}|awk '{print $2}'));do
            kill -9 ${i}
        done
    fi
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    # signal 1 is SIGHUP
    oldpid=$(cat $PIDFILE 2>/dev/null | head -n1)
    if [ "x${oldpid}" != "x" ] && [ -e "/proc/${oldpid}" ] && [ "x$(readlink /proc/${oldpid}/exe 2>/dev/null)" = "x$DAEMON" ];then
        start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
        if [ "x$?" = "x0" ] || [ "$?" = "x1" ];then
            /bin/true
        fi
    else
        do_start
        return $?
    fi
    return 0
}

ret=0
case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC "
    do_start
    ret=$?
    case "$ret" in
		0|1) ret=0;[ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC"
	do_stop
    ret=$?
	case "$ret" in
		0|1) ret=0;[ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload)
	log_daemon_msg "Reloading $DESC"
	do_reload
    ret=$?
	log_end_msg $ret
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC"
	do_stop
    ret=$?
	case "$ret" in
	  0|1)
		do_start
        ret=$?
		case "$ret" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
          ret=1
          # Failed to stop
          log_end_msg $ret
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

exit $ret;
