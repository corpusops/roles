---
- include_role: {name: corpusops.roles/registry, public: true}
  vars: {cops_vars_registry_target: corpusops_lxc}
  tags: [corpusops_vars, corpusops_lxc_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
- include_jinja_vars:
    content: |-
      {%- set prefix = cops_vars_registry_prefix %}
      {%- set namespaced = vars[cops_vars_registry_prefix+'vars'] %}
      {%- set registry = {cops_vars_registry_prefix+'vars': namespaced} %}
      {%- if namespaced['container_name'] %}
      {%-  set _ = namespaced['containers'].setdefault(namespaced['container_name'], {}) %}
      {%- endif %}
      {%- for lxc in namespaced['containers'] %}
      {%-  set lxcdata = namespaced['containers'][lxc] %}
      {%-  for k in [
            'ubuntu_release', 'ubuntu_mirror',
            'remove_password', 'docker',
            'included_config',
            'nameservers', 'ns_search',
            'ssh_keys_paths', 'ssh_keys', 'ssh_user',
            'auto_start', 'container_name', 'path',
            'backing_store', 'clone_snapshot',
            'from_container',
            'pip', 'clone_snapshot',
            'template',
            'template_options',
            ] %}
      {%-    if k == 'clone_snapshot' %}
      {%-      set bs = namespaced['backing_store'] %}
      {%-      set bss = namespaced['clone_snapshot'] %}
      {%-      if bss in [None, 'None', 'none', 'null', ''] and bs not in ['dir', 'lvm']%}
      {%-        set bss = True %}
      {%-      endif%}
      {%-      set _ = lxcdata.setdefault(k, bss) %}
      {%-    endif %}
      {%-    set  _ = lxcdata.setdefault(k, namespaced.get(k, None)) %}
      {%-  endfor %}
      {%-  for k in ['template_options'] + corpusops_lxc_cops_computed_defaults %}
      {%-    if k in lxcdata %}
      {%-      set _ = lxcdata.update({k: lxcdata[k]}) %}
      {%-    endif %}
      {%-  endfor %}
      {%-  set netplan = lxcdata.setdefault('netplan', {}) %}
      {%-  set netplannet   = netplan.setdefault('network', {}) %}
      {%-  set _            = netplannet.setdefault('version', 2) %}
      {%-  set netplanether = netplannet.setdefault('ethernets', {}) %}
      {%-  set netconfigured = [] %}
      {%-  for ifc in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] %}
      {%-    for k in ['mac', 'bridge', 'gateway', 'ip'] %}
      {%-      set ifcknob = 'eth{0}_{1}'.format(ifc, k) %}
      {%-      set  _ = lxcdata.setdefault(ifcknob, namespaced[ifcknob]) %}
      {%-    endfor %}
      {%-    set hasnetconf = (
              lxcdata['eth{0}_mac'.format(ifc)] or
              lxcdata['eth{0}_ip'.format(ifc)] or
              lxcdata['eth{0}_bridge'.format(ifc)]) %}
      {%-    if hasnetconf %}
      {%-      set ethernet = netplanether.setdefault("eth{0}".format(ifc), {}) %}
      {%-      set _ = netconfigured.append("eth{0}".format(ifc)) %}
      {%-      set ip = lxcdata['eth{0}_ip'.format(ifc)] %}
      {%-      for conf, knob in {
                'mac': 'macaddress',
                'gateway': 'routes',
                'ip': 'addresses'}.items() %}
      {%-        set confval = lxcdata['eth{0}_{1}'.format(ifc, conf)] %}
      {%-        if confval %}
      {#-          only configure gateway route if we are not on dhcp #}
      {%           if not ip %}{% set knob = None %}{% endif %}
      {%-          if knob in ['routes'] %}
      {%-             set _ = ethernet.setdefault(
                      'routes', []).extend([
                          {'to': '{0}/32'.format(confval),
                           'via':  lxcdata['eth{0}_ip'.format(ifc)],
                           'on-link': true,
                           'metric': 100},
                          {'to': '0.0.0.0/0',
                           'via': confval,
                           'on-link': true,
                           'metric': 100}]) %}
      {%-             set confval = ethernet['routes'] %}
      {%-          elif knob in ['addresses'] %}
      {%-            if '/' not in confval %}
      {%-              set confval = "{0}/{1}".format(confval, confval|copsf_lxc_subnet) %}
      {%-            endif %}
      {%-            set confval = [confval] %}
      {%-          endif %}
      {%-          if knob %}
      {%-           set _ = ethernet.update({knob: confval}) %}
      {%-          endif %}
      {%-        endif %}
      {%-      endfor %}
      {%-      if not ethernet.get('addresses', []) %}
      {%-         set _ = ethernet.setdefault('dhcp4', true) %}
      {%-      endif %}
      {%-    endif %}
      {%-  endfor %}
      {%-  if netconfigured %}
      {%-    set netplanns = netplanether[netconfigured[0]].setdefault('nameservers', {}) %}
      {%-    set _  = netplanns.setdefault('search',    lxcdata.ns_search) %}
      {%-    set _  = netplanns.setdefault('addresses', lxcdata.nameservers) %}
      {%-  endif %}
      {%- endfor %}
      {%- for name, val in namespaced.items() %}
      {%-    set _ = registry.update({cops_vars_registry_prefix+name: val}) %}
      {%- endfor %}
      {{- registry|to_json }}
  tags: [corpusops_vars, corpusops_lxc_vars, corpusops_lxc_sshauth_vars]
  vars: {cops_vars_registry_target: corpusops_lxc, cops_vars_registry_prefix: corpusops_lxc_}
  no_log: "{{not (cops_vars_debug|default(false))}}"
- debug: {msg: "{{corpusops_lxc_vars['containers'].get(corpusops_lxc_vars['container_name'], {})}}"}
  register: corpusops_lxc_container_vars
- name: get back some computed values to vars
  include_jinja_vars:
    content: |
      ---
      lxc_container_name: {{corpusops_lxc_vars['container_name']}}
      lxc_from_container: {{corpusops_lxc_vars['from_container']}}
  tags: [corpusops_vars, corpusops_lxc_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
