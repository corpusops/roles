---
- include_jinja_vars:
    content: |-
      ---
      {% set prefix = 'corpusops_lxc_' %}
      {% set snamespaced, vars = vars|copsf_registry(prefix, pdb=true) %}
      {{ snamespaced|to_json}}
- include_jinja_vars:
    content: |-
      ---
      {% set prefix = 'corpusops_lxc_' %}
      {% set namespaced = vars[prefix+'vars'] %}
      {% if namespaced['container_name'] %}
      {%  set _ = namespaced['containers'].setdefault(namespaced['container_name'], {}) %}
      {% endif %}
      {% for lxc in namespaced['containers'] %}
      {%  set lxcdata = namespaced['containers'][lxc] %}
      {%  for k in [
            'ubuntu_release', 'ubuntu_mirror',
            'remove_password',
            'included_config',
            'nameservers', 'ns_search',
            'ssh_keys_paths', 'ssh_keys',
            'auto_start', 'container_name', 'path',
            'backing_store', 'clone_snapshot',
            'from_container',
            'pip', 'clone_snapshot',
            'template',
            'template_options',
            ] %}
      {%    if k == 'clone_snapshot' %}
      {%      set bs = namespaced['backing_store'] %}
      {%      set bss = namespaced['clone_snapshot'] %}
      {%      if bss in [None, 'None', 'none', 'null', ''] and bs not in ['dir', 'lvm']%}
      {%        set bss = True %}
      {%      endif%}
      {%      set _ = lxcdata.setdefault(k, bss) %}
      {%    endif %}
      {%    set  _ = lxcdata.setdefault(k, namespaced.get(k, None)) %}
      {%  endfor %}
      {%  for k in ['template_options'] + corpusops_lxc_cops_computed_defaults %}
      {%    if k in lxcdata %}
      {%      set _ = lxcdata.update({k: lxcdata[k]}) %}
      {%    endif %}
      {%  endfor %}
      {%  set netplan = lxcdata.setdefault('netplan', {}) %}
      {%  set netplannet   = netplan.setdefault('network', {}) %}
      {%  set _            = netplannet.setdefault('version', 2) %}
      {%  set netplanether = netplannet.setdefault('ethernets', {}) %}
      {%  set netconfigured = [] %}
      {%  for ifc in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] %}
      {%    for k in ['mac', 'bridge', 'gateway', 'ip'] %}
      {%      set ifcknob = 'eth{0}_{1}'.format(ifc, k) %}
      {%      set  _ = lxcdata.setdefault(ifcknob, namespaced[ifcknob]) %}
      {%    endfor %}
      {%    set hasnetconf = (
              lxcdata['eth{0}_mac'.format(ifc)] or
              lxcdata['eth{0}_ip'.format(ifc)] or
              lxcdata['eth{0}_bridge'.format(ifc)]) %}
      {%    if hasnetconf %}
      {%      set ethernet = netplanether.setdefault("eth{0}".format(ifc), {}) %}
      {%      set _ = netconfigured.append("eth{0}".format(ifc)) %}
      {%      for conf, knob in {
                'mac': 'macaddress',
                'gateway': 'gateway4',
                'ip': 'addresses'}.items() %}
      {%        set confval = lxcdata['eth{0}_{1}'.format(ifc, conf)] %}
      {%        if confval%}
      {%          if knob in ['addresses'] %}
      {%            if '/' not in confval %}
      {%              set confval = "{0}/{1}".format(
                         confval, confval|copsf_lxc_subnet ) %}
      {%            endif %}
      {%            set confval = [confval] %}
      {%          endif %}
      {%          set _ = ethernet.update({knob: confval}) %}
      {%        endif %}
      {%      endfor %}
      {%      if not ethernet.get('addresses', []) %}
      {%         set _ = ethernet.setdefault('dhcp4', true) %}
      {%      endif %}
      {%    endif %}
      {%  endfor %}
      {%  if netconfigured %}
      {%    set netplanns = netplanether[netconfigured[0]].setdefault(
                                 'nameservers', {}) %}
      {%    set _  = netplanns.setdefault('search',    lxcdata.ns_search) %}
      {%    set _  = netplanns.setdefault('addresses', lxcdata.nameservers) %}
      {%  endif %}
      {% endfor %}
      {% set snamespaced2, vars = namespaced
         |copsf_registry_to_vars(vars, prefix, global_scope=True) %}
      {{ snamespaced2 | to_json}}
  tags: [corpusops_vars, corpusops_lxc_sshauth_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
- debug: {msg: "{{
    vars['corpusops_lxc_vars'].containers.get(
      vars['corpusops_lxc_vars'].container_name, {})}}"}
  register: corpusops_lxc_container_vars
- name: get back some computed values to vars
  include_jinja_vars:
    content: |
      ---
      lxc_container_name: {{vars['corpusops_lxc_vars']['container_name']}}
      lxc_from_container: {{vars['corpusops_lxc_vars']['from_container']}}
  tags: [corpusops_vars, corpusops_lxc_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
