---
- name: files
  file:
    path: "{{item.path}}"
    state: "{{item.state|default(omit)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
  with_items: "{{corpusops_localsettings_nvm_vars.files}}"
  when: "(corpusops_localsettings_nvm_vars.files is not none and
          corpusops_localsettings_nvm_vars.files|length > 0)"
- name: configs
  template:
    src: "{{item.src|default('../templates/'+item.name)}}"
    dest: "{{item.dest|default(item.name)}}"
    mode: "{{item.mode|default(omit)}}"
    owner: "{{item.owner|default(omit)}}"
    group: "{{item.group|default(omit)}}"
    trim_blocks: "{{item.trim_blocks|default(False)}}"
  with_items: "{{corpusops_localsettings_nvm_vars.configs}}"
  when: "(corpusops_localsettings_nvm_vars.configs is not none and
          corpusops_localsettings_nvm_vars.configs|length > 0)"
- when: "ansible_user_uid == 0"
  set_fact:
    cacheable: false
    _corpusops_localsettings_nvm_prefix: "{{_corpusops_localsettings_nvm_system_prefix}}"
    _corpusops_localsettings_nvm_bashrcs:
    - "{{corpusops_localsettings_nvm_vars.system_bashrc}}"
    - "{{corpusops_localsettings_nvm_vars.user_bashrc}}"
- when: "ansible_user_uid != 0"
  set_fact:
    cacheable: false
    _corpusops_localsettings_nvm_prefix: "{{_corpusops_localsettings_nvm_user_prefix}}"
    _corpusops_localsettings_nvm_bashrcs:
    - "{{corpusops_localsettings_nvm_vars.user_bashrc}}"
# forward vars to handle include_role bugs...
- when: '"latest" in corpusops_localsettings_nvm_vars.versions'
  uri:
    url: "https://api.github.com/repos/{{corpusops_localsettings_nvm_vars.github}}/releases/latest"
  register: _cops_get_version_latest
  changed_when: false
- set_fact:
    cacheable: false
    _cops_nvm_versions: |-
      {% set res = [] %}
      {% for v in corpusops_localsettings_nvm_vars.versions %}
      {% set vv = v %}
      {% if v == 'latest' %}{% set vv = _cops_get_version_latest.json.tag_name %}{%endif%}
      {% set _ = res.append(vv) %}
      {% endfor %}
      {{ res | to_json }}
- debug:
    msg:
      _archive:
        mode: "0755"
        filetest: "{{corpusops_localsettings_nvm_vars.filetest}}"
        app_path: "{{_corpusops_localsettings_nvm_app_path}}"
        archive: "{{_corpusops_localsettings_nvm_archive|copsf_basename}}"
        strip_components: "1"
        urls:
          archive_crc: null
          verify_sha256: null
          archive: "{{_corpusops_localsettings_nvm_archive}}"
  vars: {version: "{{item}}"}
  with_items: "{{_cops_nvm_versions}}"
  register: corpusops_localsettings_nvm_archives
- include_role: {name: corpusops.roles/install_archive}
  vars: {_archive: "{{item.msg._archive}}"}
  with_items: "{{corpusops_localsettings_nvm_archives.results}}"
  tags: [download]
- tags: [wire]
  blockinfile:
      unsafe_writes: true
      dest: "{{nvmbashrc}}"
      marker: "# corpusops load nvm - {mark}"
      insertafter: EOF
      block: |-
        {% if _corpusops_localsettings_nvm_app_path|regex_search('^~') %}
        export NVM_DIR="{{_corpusops_localsettings_nvm_app_path|regex_replace('^~', '$HOME')}}"
        {% else %}
        export NVM_DIR="{{_corpusops_localsettings_nvm_app_path }}"
        {% endif %}
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  vars: {version: "{{_cops_nvm_versions[0]}}"}
  with_items: "{{_corpusops_localsettings_nvm_bashrcs}}"
  loop_control: {loop_var: nvmbashrc}
