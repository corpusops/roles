---
- cops_lsb_release: {}
  tags: [corpusops_vars, corpusops_vars_release]
- name: setup cops facts
  corpusops_facts:
    ext_ip: "{{corpusops_network_get_ext_ip}}"
    ext_ip_value: "{{corpusops_network_live_ext_ip_value|default(none)}}"
- name: test service manager
  environment:
    PAGER: ""
    LANG: C
    LC_ALL: C
  shell: |
    cret=3
    if ls -l /proc/1/exe | egrep -iq "upstart|system.?d|open.?rc| /sbin\/init$";then
      exit 0
    fi
    if ( systemctl status --no-pager {{corpusops_core_systemd_check_target}} 2>&1 | grep -iq target; );then
      exit 0
    fi
    exit 1
  failed_when: False
  changed_when: False
  register: cops_test_services_mgr
  tags: [corpusops_vars, corpusops_vars_core]

- name: registry setter
  include_jinja_vars:
    content: |-
      {%- set cops_vars_registry_prefix = cops_vars_registry_target + "_" %}
      {%- set registry = lookup('cops_registry', cops_vars_registry_prefix) %}
      {%- set snamespaced = registry[cops_vars_registry_prefix+'vars'] %}
      {#- environment #}
      {%- set envs = {'env': snamespaced['env']} %}
      {%- for curtest in [
          ansible_fqdn, ansible_hostname,
          inventory_hostname, inventory_hostname_short,
        ] %}
      {%-  if (
          (curtest.lower()
           |regex_search('^(staging|qa|uat|prod)', ignorecase=true)
          ) or
          (curtest.lower()
           |regex_search(
                '-'
                '('
                'mysql|redis|pgsql|postgresql'
                '|es|mongod?b?|elasticsearch'
                ')'
                '($|\\.)'
                , ignorecase=true)
          )
          ) and not envs.env %}
      {%-    set _ = envs.update({'env': 'prod'})%}
      {%-  endif %}
      {%- endfor %}
      {%- if envs.env != snamespaced['env']%}
      {%-  set _ = snamespaced.update({'env': envs.env}) %}
      {%- endif %}
      {#- vt #}
      {%- set vt = (ansible_virtualization_type|default(None) or '')|lower %}
      {%- set computed_defaults = [
          ('vt', vt),
          ('has_services_manager',
            cops_test_services_mgr.rc==0),
          ('is_vagrant', vt == 'virtualbox'),
          ('is_virtualbox', vt == 'virtualbox'),
          ('is_vbox', vt == 'virtualbox'),
          ('is_lxc', vt == 'lxc'),
          ('is_docker', vt in ['docker', 'container', 'VirtualPC']),
          ('is_container', vt in ['lxc', 'docker', 'container', 'VirtualPC']),
          ('security', vt not in ['docker', 'container', 'VirtualPC']),
          ('server_type', (vt in ['docker', 'lxc', 'container', 'VirtualPC'])
                          | ternary(vt, 'baremetal')),
      ] %}
      {%- for name, val in computed_defaults %}
      {%-  set _ = snamespaced.setdefault(name, none) %}
      {%-  if snamespaced[name] is none %}
      {%-    set _ = snamespaced.update({name: val}) %}
      {%-  endif %}
      {%- endfor %}
      {%- for name, val in snamespaced.items() %}
      {%-    set _ = registry.update({cops_vars_registry_prefix+name: val}) %}
      {%- endfor %}
      {%- set _ = registry.update({
        'cops_root': registry['corpusops_core_vars'].prefix,
        'corpusops_vars': registry['corpusops_core_vars']
      }) %}
      {{- registry|to_json }}
  register: registry
  no_log: "{{not (cops_vars_debug|default(false))}}"
  vars: {cops_vars_registry_target: corpusops_core}

- name: registry setter
  include_jinja_vars:
    content: |-
      {%- set cops_vars_registry_prefix = cops_vars_registry_target + "_" %}
      {%- set snamespaced = lookup('cops_net', cops_vars_registry_prefix, func='live_settings') %}
      {%- set registry = lookup('cops_registry', cops_vars_registry_prefix, namespaced=snamespaced) %}
      {%- set snamespaced = registry[cops_vars_registry_prefix+'vars'] %}
      {%- for name, val in snamespaced.items() %}
      {%-    set _ = registry.update({cops_vars_registry_prefix+name: val}) %}
      {%- endfor %}
      {{- registry|to_json }}
  register: registry
  tags: [corpusops_vars, corpusops_network_live_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
  vars: {cops_vars_registry_target: corpusops_network_live}
  when: ansible_system not in ['Darwin']

- include_jinja_vars:
    content: |-
      {%- set cops_vars_registry_prefix = cops_vars_registry_target + "_" %}
      {%- set lprefix = 'corpusops_network_live_' %}
      {%- set snamespaced = lookup('cops_net', lprefix, func='settings', prefix=cops_vars_registry_prefix) %}
      {%- set registry = lookup('cops_registry', cops_vars_registry_prefix, namespaced=snamespaced) %}
      {%- set snamespaced = registry[cops_vars_registry_prefix+'vars'] %}
      {%- for name, val in snamespaced.items() %}
      {%-    set _ = registry.update({cops_vars_registry_prefix+name: val}) %}
      {%- endfor %}
      {{- registry|to_json }}
  register: registry
  tags: [corpusops_vars, corpusops_network_vars]
  no_log: "{{not (cops_vars_debug|default(false))}}"
  vars: {cops_vars_registry_target: corpusops_network_settings}
  when: ansible_system not in ['Darwin']
