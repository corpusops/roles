{% set lxcvars = corpusops_lxc_container_vars.msg %}
{% set legacy_map = {
'lxc.devttydir'             : 'lxc.tty.dir',
'lxc.haltsignal'            : 'lxc.signal.halt',
'lxc.id_map'                : 'lxc.idmap',
'lxc.init_cmd'              : 'lxc.init.cmd',
'lxc.init_gid'              : 'lxc.init.gid',
'lxc.init_uid'              : 'lxc.init.uid',
'lxc.limit'                 : 'lxc.prlimit',
'lxc.logfile'               : 'lxc.log.file',
'lxc.loglevel'              : 'lxc.log.level',
'lxc.mount'                 : 'lxc.mount.fstab',
'lxc.network'               : 'lxc.net',
'lxc.pts'                   : 'lxc.pty.max',
'lxc.rebootsignal'          : 'lxc.signal.reboot',
'lxc.rootfs'                : 'lxc.rootfs.path',
'lxc.se_context'            : 'lxc.selinux.context',
'lxc.seccomp'               : 'lxc.seccomp.profile',
'lxc.stopsignal'            : 'lxc.signal.stop',
'lxc.syslog'                : 'lxc.log.syslog',
'lxc.tty'                   : 'lxc.tty.max',
'lxc.utsname'               : 'lxc.uts.name',
'lxc.network.flags'         : 'lxc.net.{0}.flags',
'lxc.network.hwaddr'        : 'lxc.net.{0}.hwaddr',
'lxc.network.ipv4'          : 'lxc.net.{0}.ipv4.address',
'lxc.network.ipv4.gateway'  : 'lxc.net.{0}.ipv4.gateway',
'lxc.network.ipv6'          : 'lxc.net.{0}.ipv6.address',
'lxc.network.ipv6.gateway'  : 'lxc.net.{0}.ipv6.gateway',
'lxc.network.link'          : 'lxc.net.{0}.link',
'lxc.network.macvlan.mode'  : 'lxc.net.{0}.macvlan.mode',
'lxc.network.mtu'           : 'lxc.net.{0}.mtu',
'lxc.network.name'          : 'lxc.net.{0}.name',
'lxc.network.script.down'   : 'lxc.net.{0}.script.down',
'lxc.network.script.up'     : 'lxc.net.{0}.script.up',
'lxc.network.type'          : 'lxc.net.{0}.type',
'lxc.network.veth.pair'     : 'lxc.net.{0}.veth.pair',
'lxc.network.vlan.id'       : 'lxc.net.{0}.vlan.id',
} %}
{% macro l(item) %}{% if cops_lxc_legacy%}{{item}}{%else %}{{legacy_map.get(item, item)}}{%endif%}{%endmacro %}
{% if lxc_included_config %}
{{l('lxc.include')}} = {{ lxc_included_config }}
{% endif %}
{% if lxc_backing_store == 'dir' %}
{{l('lxc.rootfs')}} = {{lxc_path}}/{{lxc_container_name}}/rootfs
{% elif lxc_backing_store == 'overlayfs' %}
{{l('lxc.rootfs')}} = overlayfs:{{corpusops_lxc_clone_lxc_rootfs.stdout}}:{{lxc_path}}/{{lxc_container_name}}/delta0
{% endif %}
{% if lxc_backing_store in ['overlayfs', 'dir'] %}
{%  if lxc_backing_store in ['dir'] and not cops_lxc_legacy %}
{%  else %}
{{l('lxc.rootfs.backend')}} = {{lxc_backing_store}}
{%  endif %}
{% endif %}
{{l('lxc.mount')}} = {{lxc_path}}/{{lxc_container_name}}/fstab
{{l('lxc.utsname')}} = {{lxc_container_name}}
{{l('lxc.arch')}} = amd64
{{l('lxc.start.auto')}} = {{lxc_auto_start}}
{% for i in ['0','1','2','3','4','5','6','7','8','9'] %}
{% set hasnetconf = (lxcvars['eth{0}_mac'.format(i)] or lxcvars['eth{0}_ip'.format(i)] or lxcvars['eth{0}_bridge'.format(i)]) %}
{{hasnetconf|ternary(l('lxc.network.type' ).format(i)+' = veth', '#')}}
{{hasnetconf|ternary(l('lxc.network.name' ).format(i)+' = eth'+i, '#')}}
{{hasnetconf|ternary(l('lxc.network.flags').format(i)+' = up', '#')}}
{{(lxcvars['eth{0}_bridge'.format(i)])|ternary("{0} = {1}".format(l('lxc.network.link').format(i),   lxcvars['eth{0}_bridge'.format(i)]), '#')}}
{{   (lxcvars['eth{0}_mac'.format(i)])|ternary("{0} = {1}".format(l('lxc.network.hwaddr').format(i), lxcvars['eth{0}_mac'.format(i)]),    '#')}}
{% if hasnetconf %}
# IP/GW is done from inside container, only here as a reference
#{{    (lxcvars['eth{0}_ip'.format(i)])|ternary("{0} = {1}".format(l('lxc.network.ipv4').format(i),   lxcvars['eth{0}_ip'.format(i)]),     '#')}}
#{{((lxcvars['eth{0}_mac'.format(i)] or lxcvars['eth{0}_ip'.format(i)] or lxcvars['eth{0}_bridge'.format(i)]) and
   lxcvars['eth{0}_gateway'.format(i)])
   |ternary("{0} = {1}".format(l('lxc.network.ipv4.gateway').format(i), lxcvars['eth{0}_gateway'.format(i)]), '#')}}
{% endif %}
{% endfor %}

# include any extra, and non managed configuration
lxc.include = {{lxc_path}}/{{lxc_container_name}}/manual_lxc.conf

# uncomment to make docker works inside lxc (make it unconfined and unsecure)
# security will then rely on making everything confined running inside
# docker containers
{% set lxc_docker_c = not lxc_docker and '#' or '' %}
{{ lxc_docker_c }}lxc.apparmor.profile = unconfined
{{ lxc_docker_c }}lxc.cgroup.devices.allow = a
{{ lxc_docker_c }}lxc.mount.auto=proc:rw sys:rw
{{ lxc_docker_c }}lxc.cap.drop=

# vim:set ft=jinja:
