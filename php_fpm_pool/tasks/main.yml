---
# load default variables, first pass, load not resolved values
# make some stuff to DRY templates
- name: "fpm_pool - compute - 1"
  tags: [corpusops_vars, corpusops_fpm_pool, corpusops_fpm_pool_vars]
  include_jinja_vars:
    content: |
      {% set cops_vars_registry_prefix = cops_vars_registry_target + "_" %}
      {%- set registry = lookup('cops_registry', cops_vars_registry_prefix,
                                do_format_resolve=True) %}
      {%- set namespaced = registry[cops_vars_registry_prefix+'vars'] %}
      {%- for denvs in namespaced.base_env, namespaced.env %}
      {%-   set _ = namespaced.setdefault('computed_env', []).extend(denvs) %}
      {%- endfor %}
      {%- set _ = namespaced.update({'computed_chroot': namespaced.chroot}) %}
      {%- if namespaced.chroot and not namespaced.doc_root.startswith(namespaced.project_root) %}
      {%-   set _ = namespaced.update({'chroot': False}) %}
      {%- endif %}
      {%- for dobd in namespaced.base_open_basedir, namespaced.open_basedir %}
      {%-   set _ = namespaced.setdefault('computed_open_basedir', []).extend(dobd) %}
      {%- endfor %}
      {%- for dip in namespaced.base_include_path, namespaced.include_path %}
      {%-   set _ = namespaced.setdefault('computed_include_path', []).extend(dip)%}
      {%- endfor %}
      {%- for name, val in namespaced.items() %}
      {%-    set _ = registry.update({cops_vars_registry_prefix+name: val}) %}
      {%- endfor -%}
      {{ registry|to_json }}
  vars: {cops_vars_registry_target: corpusops_fpm_pool}
  no_log: "{{not (cops_vars_debug|default(false))}}"
# do the real stuff
- name: gen pool
  include_tasks: run.yml
  tags: [corpusops_fpm_pool, corpusops_fpm_pool_gen]
