# {{ansible_managed}}
#{% set data= corpusops_services_http_nginx_vars %}
user {{data.user}} {{data.group}};
worker_processes {{data.worker_processes}};
worker_rlimit_nofile {{data.ulimit}};
{% if data.get('no_daemon', False) %}
daemon off;
{% endif %}
# Determines how many clients will be served by each worker process.
# (Max clients = worker_connections * worker_processes)
# "Max clients" is also limited by the number of socket connections available on the system (~64k)
pid /var/run/nginx.pid;

# First load packaged modules and extensions
include /etc/nginx/modules-enabled/*.conf;

events {
    use epoll;
    {% if not data.multi_accept %}#{% endif%}multi_accept on;
    worker_connections {{data.worker_connections}};
}

http {
    # Caches information about open FDs, freqently accessed files.
    # Note that this hides IO checks for 'file exists' things, for example
    # so if you use a file marker for maintenance this cache duration
    # will do two things:
    #Â - remove a lot (really) of IO checks for trigger file existence
    # - delay any behavior based on this file existence depending on the cache duration
    open_file_cache {{data.open_file_cache}};
    open_file_cache_valid {{data.open_file_cache_valid}};
    open_file_cache_min_uses {{data.open_file_cache_min_uses}};
    open_file_cache_errors {{data.open_file_cache_errors}};

    {% for logformat, value in data.logformats.items() %}
    log_format {{logformat}} '{{value}}';
    {% endfor %}
    real_ip_recursive {{data.real_ip_recursive}};

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    {% if not data.sendfile%}#{%endif%}sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    {% if not data.tcp_nopush%}#{%endif%}tcp_nopush on;
    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.

    {% if not data.tcp_nodelay%}#{%endif%}tcp_nodelay on;
    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout {{data.keepalive_timeout}};

    # Number of requests a client can make over the keep-alive connection. This is set high for testing.
    keepalive_requests {{data.keepalive_requests}};

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection {{data.reset_timedout_connection}};

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout {{data.client_body_timeout}};

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout {{data.send_timeout}};

    types_hash_max_size {{data.types_hash_max_size}};
    {% if not data.server_tokens%}
    server_tokens off;
    {% else %}
    server_tokens on;
    {% endif %}

    variables_hash_max_size {{data.variables_hash_max_size}};
    variables_hash_bucket_size {{data.variables_hash_bucket_size}};
    server_names_hash_bucket_size {{data.server_names_hash_bucket_size}};
    server_names_hash_max_size {{data.server_names_hash_max_size}};
    {% if data.server_name_in_redirect %}
    server_name_in_redirect on;
    {% else%}
    # server_name_in_redirect off;
    {% endif %}

    client_max_body_size {{data.client_max_body_size}};


    include {{data.basedir}}/mime.types;
    default_type {{data.default_type}};

    ##
    # Logging Settings
    ##

    error_log  {{data.logdir}}/error.log {{data.loglevel}};
    access_log {{data.logdir}}/access.log {{data.logformat}};

    ##
    # Gzip Settings
    ##

    {% if data.gzip %}
    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    {% else %}
    # gzip on;
    # gzip_disable "msie6";
    {% endif %}

    # FIXME: why are gzip settings commented?
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # Microcache zone definition for FastCGI.
    fastcgi_cache_path /var/cache/nginx_microcache levels=1:2 keys_zone=microcache:5M max_size=1G inactive=1h loader_threshold=2592000000 loader_sleep=1 loader_files=100000;

    # status allowed hosts
    include {{data.basedir}}/status_allowed_hosts.conf;

    # ldap cache
    {% if data.get('ldap_cache', True) %}
    auth_ldap_cache_enabled on;
    auth_ldap_cache_expiration_time 10000;
    auth_ldap_cache_size 1000;
    {% endif %}

    proxy_headers_hash_max_size  {{data.proxy_headers_hash_max_size}};
    proxy_headers_hash_bucket_size {{data.proxy_headers_hash_bucket_size}};

    ##
    # nginx-passenger config
    ##
    # Uncomment it if you installed nginx-passenger
    ##

    #passenger_root /usr;
    #passenger_ruby /usr/bin/ruby;

    ##
    # Virtual Host Configs
    ##

    # Define type of requests going to logs (to remove OPTIONS requests for example)
    map $request_method $method_loggable {
        {% if data.get('donotlog_options_requests', True) %}
        OPTIONS 0;
        {% endif %}
        default 1;
    }

    # SSL offload support (use_scheme is the proxified scheme)
    # if X-SSL/X-FORWADED-PROTO header is set, we are behind a ssl gateway
    # so the scheme is either from the request or
    # forced to ssl if we have the X-SSL header set to 1
    # break loop resolution loop while map resolution
    map "$http_x_ssl$http_x_forwaded_proto" $forwarded_ssl_scheme {
        default $scheme;
        "~(1|https)" https;
    }
    # if we come directly from https on localbox without x_ssl, set it.
    map $forwarded_ssl_scheme $http_x_ssl_resolved {
        default 0;
        https 1;
    }

    # boolean value of https/http: on == https
    # again, we default to the request value
    # but also force it to true when we are forced
    # to be on ssl via X-SSL/X-FORWARDED-PROTO
    map $forwarded_ssl_scheme $fastcgi_ssl_toggle {
        default $https;
        https on;
    }
    map $http_x_ssl_resolved $forwarded_server_port {
        default $server_port;
        1 443;
    }

    map $http_x_ssl_resolved $http_x_forwaded_proto_resolved {
        default http;
        1 https;
    }

    # Cache base path settings
    {% if data.get('proxy_temp_path', '') %}
    proxy_temp_path {{data.proxy_temp_path}};
    {% endif %}


    # Enabled Virtualhosts are present in this directory (as zz_vhost_* symlinks) -- like a sites-enabled in fact--
    # with also any specific conf (from distribution, for example)
    include {{data.basedir}}/conf.d/*.conf;
}


#mail {
#    # See sample authentication script at:
#    # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#    # auth_http localhost/auth.php;
#    # pop3_capabilities "TOP" "USER";
#    # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#    server {
#        listen     localhost:110;
#        protocol   pop3;
#        proxy      on;
#    }
#
#    server {
#        listen     localhost:143;
#        protocol   imap;
#        proxy      on;
#    }
#}
#
#
