# -*- mode: nginx; mode: flyspell-prog;  ispell-local-dictionary: "american" -*-
# {{ansible_managed}}
### Implementation of the microcache concept as presented here:
### http://fennb.com/microcaching-speed-your-app-up-250x-with-no-n

## The cache zone referenced.
fastcgi_cache microcache;
## The cache key.
fastcgi_cache_key $host$request_method$request_uri$query_string;

## For 200 and 301 make the cache valid for 5 second.
fastcgi_cache_valid 200 301 5s;
## For 302 make it valid for 1 minute.
fastcgi_cache_valid 302 1m;
## For 301 make it valid for 1 day.
fastcgi_cache_valid 301 1d;
## For 404 make it valid 1 minute.
fastcgi_cache_valid 404 1m;
## If there are any upstream errors or the item has expired use
## whatever it is available.
fastcgi_cache_use_stale error timeout invalid_header updating http_500;
## The Cache-Control and Expires headers should be delivered untouched
## from the upstream to the client.
fastcgi_ignore_headers Cache-Control Expires;

# do not interfere with Cookie headers
fastcgi_pass_header Set-Cookie;
fastcgi_pass_header Cookie;

## If we have a cookie we should bypass the cache. The same if we have a
## no cache variable set (POST requests, etc.)
## include map_cache.conf in your vhost for this to work
fastcgi_cache_bypass $no_cache1;
fastcgi_no_cache $no_cache1;
fastcgi_cache_bypass $no_cache2;
fastcgi_no_cache $no_cache2;
## Add a cache miss/hit status header.
add_header X-Micro-Cache $upstream_cache_status;

### Ouch: this would remove the cache-control headers from drupal, so... no
## we remove this last instruction:

## To avoid any interaction with the cache control headers we expire
## everything on this location immediately.
#expires epoch;
