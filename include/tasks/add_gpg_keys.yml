--- # Import by URL
- uri: {url: "{{ukeyitem}}", return_content: yes}
  loop_control: {loop_var: ukeyitem}
  with_items: |-
    {% set skeys = [] %}
    {% for i in keys %}
    {% if i.startswith('http') %}
    {%  set _ = skeys.append(i) %}
    {% endif %}
    {% endfor %}
    {{skeys|to_json}}
  register: corpusops_install_gpg_keys_urls
  changed_when: False
- debug: msg="{{corpusops_install_gpg_keys_urls}}"
# Import in GPG (keyids and grabbed url contents)
- shell: |-
    ret=0;
    done=;
    gpg_() { export LANG=C; export LC_ALL=C; gpg ${@}; };
    {% set skeys = [] %}
    {% for i in keys %}
    {% if not i.startswith('http') %}
    {%  set _ = skeys.append(i) %}
    {% endif %}
    {% endfor %}
    {% for k in skeys %}
    if ! ( gpg_ -k "{{k}}" >/dev/null 2>&1; );then
      if ! ( gpg_ -q --keyserver {{corpusops_core_keyserver}} \
               --recv-keys "{{k}}" ; );then
           echo "failed: {{k}}";
           ret=1;
      else
           done="${done} {{k}}";
      fi;
      if ! ( gpg_ -k "{{k}}" >/dev/null 2>&1; );then
        ret=1;
      fi
    fi;
    {% endfor %}
    {% if corpusops_install_gpg_keys_urls.results|default([]) %}
    {% for k in corpusops_install_gpg_keys_urls.results %}
    if ! ( echo "{{k.content}}" | gpg_ --import ; );then
      echo "cant inline import (from url)" >&2
      ret=3;
    fi
    {% endfor %}
    {% endif %}
    if [ "x${done}" != "x" ];then
      echo "imported by id: ${done}" >&2
    fi
    exit ${ret}
  changed_when: "(('imported by id: ' in corpusops_install_gpg_keys_ids.stderr) or
                  ('imported: ' in corpusops_install_gpg_keys_ids.stderr))"
  register: corpusops_install_gpg_keys_ids

