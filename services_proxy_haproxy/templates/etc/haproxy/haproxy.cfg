# {{ ansible_managed }}
# {% set settings = corpusops_services_proxy_haproxy_vars %}
{% set config = settings.config %}
global
    # emerge alert crit err warning notice info debug
    log {{config.global.loghost}} {{config.global.logfacility}} {{config.global.loglevel}}
    # debug log
    # log 127.0.0.1 local0 debug
    maxconn {{config.global.maxconn}}
    {% if config.global.chroot %}
    chroot {{config.global.chroot}}
    {% endif %}
    ulimit-n {{config.global.ulimit}}
    user {{settings.user}}
    group {{settings.group}}
    {% if not config.global.debug%}#{%endif%}debug
    {% if not config.global.quiet%}#{%endif%}quiet
    {% if not config.global.daemon%}#{%endif%}daemon
    {% if config.global.nbproc %}
    nbproc {{config.global.nbproc}}
    {% endif %}
    {% if settings.stats_enabled %}
    stats socket {{config.global.stats_sock}} level {{config.global.stats_sock_lvl}}
    {% endif %}
    node {{config.global.node}}
    tune.ssl.default-dh-param 2048
    ssl-default-bind-options {{settings.ssl.bind_options}}
    ssl-default-bind-ciphers {{settings.ssl.bind_ciphers}}
    ssl-default-server-options {{settings.ssl.server_bind_options}}
    ssl-default-server-ciphers {{settings.ssl.server_bind_ciphers}}

defaults
    log  {{config.default.log}}
    mode {{config.default.mode}}
    {% for opt in config.default.options %}
    option {{opt}}
    {% endfor %}

    retries {{config.default.retries}}
    maxconn {{config.default.maxconn}}

    timeout connect {{config.default.timeout.connect}}
    timeout queue   {{config.default.timeout.queue}}
    timeout client  {{config.default.timeout.client}}
    timeout server  {{config.default.timeout.server}}

{% set stats = {'stats': settings.stats} %}
{% for id, data in stats.items() %}
{%  set name = data.get('name', id) %}
{%  if settings.version < '1.6' %}
listen {{name}} {{data.bind}}
{%  else %}
listen {{name}}
    bind {{data.bind}}
{%  endif %}
    log {{data.get('log', 'global')}}
    mode {{data.get('mode', 'http')}}

{%  for opt in data.get('raw_opts', []) %}
{%-     for optname in ['mode', 'bind', 'log'] %}
{%-         if opt.strip().startswith(optname + ' ') %}
{%-             set opt = '' %}
{%-         endif %}
{%-     endfor %}
{%      if opt %}    {{opt.format(**data)}}{%endif%}
{%- endfor %}
{%  for srv in data.get('servers', []) %}
    server {{ srv.name }} {{srv.bind}} {{srv.opts-}}
{%  endfor %}

{% endfor %}
